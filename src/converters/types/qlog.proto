// qlog.proto
package qlog;
syntax = "proto3";

message IQLog {
    string qlog_version = 1 [json_name="qlog_version"];
    string title = 2;
    string description = 3;

    repeated ITrace traces = 4; // todo: use OneOf to support | ITraceError see https://github.com/protocolbuffers/protobuf/issues/2592#issuecomment-365311139
}


message ITrace {
    string title = 2;
    string description = 3;

    IConfiguration configuration = 4;
    ICommonFields common_fields = 5;
    repeated string event_fields = 6;

    repeated IEvent events = 7;

    IVantagePoint vantage_point = 8 [json_name="vantage_point"]; // should be at 0, but aioquic logs this at the bottom, and this makes it easier for us to do automated checks after deserializing protobufs
}

message IConfiguration {
    string time_units = 0;
    string time_offset = 1;
    
    repeated string original_uris = 2;
}

message ICommonFields{
    string group_id = 0;
    string protocol_type = 1;
    string ODCID = 2;
    string reference_time = 3; // TODO: should really be uint32 
}

message IVantagePoint {
    string name = 1;
    VantagePointType type = 2;
    VantagePointType flow = 3;
}

enum VantagePointType {
    client = 0;
    server = 1;
    network = 2;
    unknown = 3;
}

message IEvent {
    uint32 timestamp = 0;
    Category category = 1;
    EventType type = 2;

    // field names have to be the same as the type field so we can revert them to proper qlog afterwards
    // (in qlog, the field is just called "data" for all events, but that's not possible in protobufs apparently)
    oneof data {
        IEventDatagramsSent datagrams_sent = 3;
        IEventDatagramsReceived datagrams_received = 4;
        IEventPacketSent packet_sent = 5;
        IEventPacketReceived packet_received = 6;

        IEventH3FrameCreated frame_created = 7;
        IEventH3FrameParsed frame_parsed = 8;
        IEventH3DataMoved data_moved = 9;

        IEventSpinBitUpdated spin_bit_updated = 10;
        IEventMetricsUpdated metrics_updated = 11;

        IEventParametersSet parameters_set = 12; // TODO: figure out how to do this with the http and recovery parameters_set events... cannot have the same name, DERP // probably best to include category here as well then
        IEventPacketDropped packet_dropped = 13;
    }
}

enum Category {
    transport = 0;
    http = 1;
    connectivity = 2;
    recovery = 3;
}

enum EventType {
    datagramsSent = 0;
    datagramsReceived = 1;
    packetSent = 2;
    packetReceived = 3;

    frameCreated = 4;
    frameParsed = 5;
    dataMoved = 6;

    spinBitUpdated = 7;
    metricsUpdated = 8;

    parametersSet = 9;
    packetDropped = 10;
}

message IEventDatagramsSent {
    uint32 count = 0;
    uint32 byte_length = 1;
}

message IEventDatagramsReceived {
    uint32 count = 0;
    uint32 byte_length = 1;
}

message IEventPacketReceived {
    PacketType packet_type = 0;
    IPacketHeader header = 1;

    repeated QuicFrame frames = 2;

    bool is_coalesced = 3;
    bytes raw_encrypted = 4;
    bytes raw_decrypted = 5;

    string trigger = 6;
}

message IEventPacketSent {
    PacketType packet_type = 0;
    IPacketHeader header = 1;

    repeated QuicFrame frames = 2;

    bool is_coalesced = 3;
    bytes raw_encrypted = 4;
    bytes raw_decrypted = 5;

    string trigger = 6;
}

message IEventPacketDropped {
    PacketType packet_type = 0;
    uint32 packet_size = 1;

    bytes raw = 2;

    string trigger = 3;
}

message IEventSpinBitUpdated {
    bool state = 0;
}

message IEventMetricsUpdated {
    uint32 bytes_in_flight = 0;
    uint32 cwnd = 1;
    uint32 latest_rtt = 2;
    uint32 min_rtt = 3;
    uint32 smoothed_rtt = 4;
    uint32 rtt_variance = 5;

    uint32 max_ack_delay = 6;
    uint32 pro_count = 7;

    uint32 congestion_window = 8;
    uint32 ssthresh = 9;

    uint32 packets_in_flight = 10;
    bool in_recovery = 11;
    uint32 pacing_rate = 12;

    string trigger = 13;
}

message IEventParametersSet {
    string owner = 0; // TODO make enum "local" | "remote"

    bool resumption_allowed = 1;
    bool early_data_enabled = 2;
    string alpn = 3;
    string version = 4;
    string tls_cipher = 5;

    string original_connection_id = 6;
    string stateless_reset_token = 7;
    bool disable_active_migration = 8;

    uint32 idle_timeout = 9;
    uint32 max_packet_size = 10;
    uint32 ack_delay_exponent = 11;
    uint32 max_ack_delay = 12;
    uint32 active_connection_id_limit = 13;

    uint64 initial_max_data = 14;
    uint64 initial_max_stream_data_bidi_local = 15;
    uint64 initial_max_stream_data_bidi_remote = 16;
    uint64 initial_max_stream_data_uni = 17;
    uint64 initial_max_streams_bidi = 18;
    uint64 initial_max_streams_uni = 19;

    IPreferredAddress preferred_address = 20;

    uint32 max_datagram_frame_size = 21; // DATAGRAM extension 

    string trigger = 22;
}

message IPreferredAddress {
    string ip_v4 = 0;
    string ip_v6 = 1;
    
    string port_v4 = 2;
    string port_v6 = 3;

    string connection_id = 4;
    string stateless_reset_token = 5;
}


enum PacketType {
    initial = 0;
    handshake = 1;
    zerortt = 2;  // protobuf.js doesn't support _ in enum names nor starting with a number APPARENTLY
    onertt = 3; // protobuf.js doesn't support _ in enum names nor starting with a number APPARENTLY
    retry = 4;
    versionnegotiation = 5; // protobuf.js doesn't support _ in enum names APPARENTLY
}

message IPacketHeader {
    uint64 packet_number = 0;
    uint32 packet_size = 1;
    uint32 payload_length = 2;

    string version = 3;
    string scil = 4;
    string dcil = 5;
    string scid = 6;
    string dcid = 7;
}

// put everything into 1 big definition because protobuf doesn't have a union type...
// the indexation numbers take up progressively more bytes though, so prioritize numbers < 15 for frequent frames like ACK and STREAM
message QuicFrame {
    QuicFrameType frame_type = 0; 

    // ACK frame
    int32 ack_delay = 1;
    repeated AckRange acked_ranges = 2;

    // Stream frame
    uint64 stream_id = 3;
    uint64 offset = 4;
    uint32 length = 5;

    bool fin = 6;

    uint32 error_code = 7;

    uint64 maximum = 8;
    uint64 limit = 9;

    StreamType stream_type = 10;

    uint64 sequence_number = 11;
    uint64 retire_prior_to = 12;
    string connection_id = 13;
    bytes reset_token = 14;

    bytes data = 15;

    ErrorSpace error_space = 16;
    uint32 raw_error_code = 17;
    string reason = 18;
    uint64 trigger_frame_type = 19;

    uint64 raw_frame_type = 20;

    string token = 21;

    // ACK frame (infrequent fields)
    string ect1 = 22;
    string ect0 = 23;
    string ce = 24;

    // STREAM frame 
    bytes raw = 25;
}

message AckRange {
    repeated int64 range = 0 [packed=true]; // packed prevents header per entry 
}

enum StreamType {
    bidirectional = 0;
    unidirectional = 1;
}

enum ErrorSpace {
    transport_error = 0;
    application_error = 1;
}

enum QuicFrameType {
    padding = 0;
    ping = 1;
    ack = 2;
    resetStream = 3;
    stopSending = 4;
    crypto = 5;
    newToken = 6;
    stream = 7;
    maxData = 8;
    maxStreamData = 9;
    maxStreams = 10;
    dataBlocked = 11;
    streamDataBlocked = 12;
    streamsBlocked = 13;
    newConnectionId = 14;
    retireConnectionId = 15;
    pathChallenge = 16;
    pathResponse = 17;
    connectionClose = 18;
    applicationClose = 19;
    unknownFrameType = 20;
    handshakeDone = 21;
}

message IEventH3FrameCreated {
    uint64 stream_id = 0;
    HTTP3Frame frame = 1;
    uint32 byte_length = 2;

    bytes raw = 3;
}

message IEventH3FrameParsed {
    uint64 stream_id = 0;
    HTTP3Frame frame = 1;
    uint32 byte_length = 2;

    bytes raw = 3;
}

message IEventH3DataMoved {
    uint64 stream_id = 0;
    uint64 offset = 1;
    uint32 length = 2;

    MoveDirection from = 3;
    MoveDirection to = 4;

    bytes raw = 5;

    string trigger = 6;
}

message HTTP3Frame {
    H3FrameType frame_type = 0;

    repeated IHTTPHeader headers = 1;
    repeated IHTTPSetting settings = 2;

    uint64 stream_id = 3;
    uint64 push_id = 4;

    bytes raw = 5;
}

enum H3FrameType {
    data = 0;
    headers = 1;
    cancel_push = 2;
    settings = 3;
    push_promise = 4;
    goaway = 5;
    max_push_id = 6;
    duplicate_push = 7;
    reservedType = 8; // TODO: in normal qlog, this is reserved, but that's a restricted keyword in protobuf...
    unknown = 9;
}

enum MoveDirection {
    application = 0;
    transport = 1;
}

message IHTTPHeader {
    string name = 0;
    string value = 1;
}

message IHTTPSetting {
    string name = 0;
    string value = 1;
}